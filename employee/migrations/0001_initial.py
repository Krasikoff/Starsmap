# Generated by Django 4.2 on 2024-10-04 19:25

import datetime

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=250)),
                ('last_name', models.CharField(max_length=250)),
                ('date_hire', models.DateField(default=datetime.datetime.now)),
                ('date_fire', models.DateField(blank=True, null=True)),
                ('grade', models.CharField(choices=[('No value', 'No value'), ('Junior', 'Junior'), ('Middle', 'Middle'), ('Senior', 'Senior')], default=('No value', 'No value'), max_length=8)),
                ('key_people', models.BooleanField(default=False)),
                ('bus_factor', models.BooleanField(default=False)),
                ('emi', models.FloatField(default=0.0)),
                ('role', models.CharField(choices=[('admin', 'Администратор'), ('hr', 'HR'), ('team_chief', 'Руководитель'), ('user', 'Пользователь')], default='user', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'ordering': ['last_name', 'first_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Competence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name': 'Компетенция',
                'verbose_name_plural': 'Компетенции',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LastRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_match', models.BooleanField(default=False)),
                ('last_date', models.DateField(default=datetime.datetime.now)),
                ('competence', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lastrating', to='employee.competence', verbose_name='Компетенция')),
            ],
            options={
                'verbose_name': 'Соответствие на последнюю дату',
                'verbose_name_plural': 'Соответствия на последнюю дату',
                'ordering': ['user', 'skill', 'last_date'],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должности',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name': 'Команда',
                'verbose_name_plural': 'Команды',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vacancy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('closed', models.BooleanField(default=False)),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vacancy', to='employee.position', verbose_name='Должность')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vacancy', to='employee.team', verbose_name='Команда')),
            ],
            options={
                'verbose_name': 'Вакансия',
                'verbose_name_plural': 'Вакансии',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('domain', models.CharField(choices=[('Hard skills', 'Hard skills'), ('Soft skills', 'Soft skills')], max_length=12)),
                ('competence', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skill', to='employee.competence', verbose_name='Компетенция')),
            ],
            options={
                'verbose_name': 'Навык',
                'verbose_name_plural': 'Навыки',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(choices=[(0, 'Не оценивался'), (1, 'Не владеет'), (2, 'Начинающий'), (3, 'Базовый'), (4, 'Уверенный'), (5, 'Экспертный')], default=(0, 'Не оценивался'))),
                ('date_score', models.DateField(default=datetime.datetime.now)),
                ('match', models.BooleanField(default=False)),
                ('chief_proof', models.BooleanField(default=False)),
                ('need_to_study', models.BooleanField(default=False)),
                ('date_need', models.DateField(default=datetime.datetime.now)),
                ('date_start', models.DateField(default=datetime.datetime.now)),
                ('date_end', models.DateField(default=datetime.datetime.now)),
                ('last_rating', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='employee.lastrating', verbose_name='Последняя оценка')),
            ],
            options={
                'verbose_name': 'Рейтинг',
                'verbose_name_plural': 'Рейтинги',
                'ordering': ['last_rating'],
            },
        ),
        migrations.AddField(
            model_name='lastrating',
            name='skill',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lastrating', to='employee.skill', verbose_name='Навык'),
        ),
        migrations.AddField(
            model_name='lastrating',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lastrating', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник'),
        ),
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(blank=True, null=True)),
                ('vacancy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='condidate', to='employee.vacancy', verbose_name='Вакансия')),
            ],
            options={
                'verbose_name': 'Кандидат',
                'verbose_name_plural': 'Кандидаты',
                'ordering': ['link'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='position',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='employee.position', verbose_name='Должность'),
        ),
        migrations.AddField(
            model_name='user',
            name='team',
            field=models.ManyToManyField(to='employee.team', verbose_name='Команда'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
